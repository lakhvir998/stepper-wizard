{"version":3,"sources":["Wizard/Step.tsx","Wizard/Stepper.tsx","Wizard/theme.ts","Wizard/Wizard.tsx","DemoStep.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","Label","h1","StepContent","Step","id","component","label","active","props","isCompleted","theme","primary","span","isActive","secondary","primaryTextColor","Stepper","index","activeStep","themes","light","backgroundColor","dark","StepperContainer","ActionContainer","Button","button","Wizard","steps","showStepByStepLegend","onStepChange","onSuccess","finalStep","step","length","map","key","onClick","data-testid","DemoStep","title","App","useState","setStep","className","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7014aab3.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { StepProps } from \"./types\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.h1``;\n\nconst StepContent = styled.div``;\n\n/**\n * Stepper Wizard\n */\nconst Step: React.FC<StepProps> = ({ id, component, label, active }) => {\n  if (!active) return null;\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <StepContent>{component}</StepContent>\n    </Container>\n  );\n};\n\nexport default Step;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { StepperProps, StyledStepProps } from \"./types\";\n\nconst Container = styled.div<StyledStepProps>`\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  flex-basis: 0;\n  &:after {\n    content: \"\";\n    position: absolute;\n    background: ${(props) =>\n      props.isCompleted ? props.theme.primary : \"#f1f1f1\"};\n    display: block;\n    width: 100%;\n    height: 5px;\n    top: 10px;\n    z-index: 1;\n  }\n  &:last-child {\n    &::after {\n      background: transparent;\n    }\n  }\n`;\n\nconst Step = styled.span<StyledStepProps>`\n  width: 20px;\n  height: 20px;\n  line-height: 22px;\n  display: inline-block;\n  border-radius: 25px;\n  background: ${(props) => (props.isCompleted ? props.theme.primary : \"#fff\")};\n  border: ${(props) =>\n    `2px solid ${\n      props.isActive ? props.theme.primary : props.theme.secondary\n    }`};\n  color: ${(props) =>\n    props.isCompleted\n      ? props.theme.primaryTextColor\n      : props.isActive\n      ? props.theme.primary\n      : props.theme.secondary};\n  z-index: 2;\n  position: absolute;\n  left: 0;\n  text-align: center;\n  font-size: 14px;\n`;\n\n/**\n * Stepper Wizard\n */\nconst Stepper: React.FC<StepperProps> = ({ index, activeStep }) => {\n  return (\n    <Container isCompleted={activeStep > index}>\n      <Step isActive={activeStep === index} isCompleted={activeStep > index}>\n        {index + 1}\n      </Step>\n    </Container>\n  );\n};\n\nexport default Stepper;\n","const themes = {\n  light: {\n    primary: \"#302AE6\",\n    secondary: \"#536390\",\n    primaryTextColor: \"#ffffff\",\n    backgroundColor: \"#ffffff\",\n  },\n  dark: {\n    primary: \"#9A97F3\",\n    secondary: \"#818cab\",\n    primaryTextColor: \"#e1e1ff\",\n    backgroundColor: \"#161625\",\n  },\n};\n\nexport default themes;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { WizardProps, StyledButtonProps } from \"./types\";\nimport Step from \"./Step\";\nimport Stepper from \"./Stepper\";\nimport themes from \"./theme\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  background-color: ${(props) => props.theme.backgroundColor};\n  color: ${(props) => props.theme.primary};\n  border: 1px solid #ddd;\n`;\n\nconst StepperContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  margin-top: 20px;\n  justify-content: flex-end;\n`;\n\nconst Button = styled.button<StyledButtonProps>`\n  background: none;\n  border: 1px solid\n    ${(props) => (props.primary ? props.theme.primary : props.theme.secondary)};\n  background-color: ${(props) =>\n    props.primary ? props.theme.primary : props.theme.secondary};\n  color: ${(props) => props.theme.primaryTextColor};\n  padding: 10px 20px;\n  font-size: 18px;\n  margin-left: 10px;\n`;\n\n/**\n * Stepper Wizard\n */\nconst Wizard: React.FC<WizardProps> = ({\n  steps,\n  activeStep,\n  dark = false,\n  showStepByStepLegend = true,\n  onStepChange,\n  onSuccess = () => {},\n}) => {\n  const theme = dark ? themes.dark : themes.light;\n\n  const handleNext = () => {\n    const step = activeStep + 1;\n    onStepChange(step);\n    if (finalStep(step)) {\n      onSuccess();\n    }\n  };\n\n  const handleBack = () => {\n    onStepChange(activeStep - 1);\n  };\n\n  const finalStep = (step: number) => {\n    return step >= steps.length;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        {showStepByStepLegend && (\n          <StepperContainer>\n            {steps.map((step, index) => (\n              <Stepper\n                key={`stepper-${index + 1}`}\n                index={index}\n                activeStep={activeStep}\n              />\n            ))}\n          </StepperContainer>\n        )}\n        {steps.map((step, index) => (\n          <Step {...step} key={`step-${index}`} active={activeStep === index} />\n        ))}\n\n        {finalStep(activeStep) && (\n          <>\n            <h1>All Done!</h1>\n            <p> You have successfully completed all steps.</p>\n          </>\n        )}\n        {steps.length > activeStep && (\n          <ActionContainer>\n            {activeStep >= 1 && (\n              <Button onClick={handleBack} data-testid=\"previous\">\n                Back\n              </Button>\n            )}\n            <Button primary onClick={handleNext} data-testid=\"next\">\n              Next\n            </Button>\n          </ActionContainer>\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default Wizard;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport interface DemoProps {\n  title: string;\n}\n\nconst Container = styled.div`\n  display: flex;\n`;\n\n/**\n * Stepper Wizard\n */\nconst DemoStep: React.FC<DemoProps> = ({ title }) => {\n  return (\n    <Container>\n      <h1>{title}</h1>\n    </Container>\n  );\n};\n\nexport default DemoStep;\n","import React, { useState } from \"react\";\nimport Wizard from \"./Wizard\";\nimport DemoStep from \"./DemoStep\";\n\nfunction App() {\n  const [activeStep, setStep] = useState(0);\n  const steps = [\n    {\n      id: 1,\n      component: <DemoStep title=\"step 1\" />,\n      label: \"Step 1\",\n      index: 1,\n    },\n    {\n      id: 2,\n      component: <DemoStep title=\"step 2\" />,\n      label: \"Step 2\",\n      index: 2,\n    },\n    {\n      id: 3,\n      component: <DemoStep title=\"step 2\" />,\n      label: \"Step 3\",\n      index: 3,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Wizard\n        steps={steps}\n        activeStep={activeStep}\n        onStepChange={(step) => setStep(step)}\n        onSuccess={() => console.log(\"success\")}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}